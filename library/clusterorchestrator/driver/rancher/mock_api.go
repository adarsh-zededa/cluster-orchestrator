// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package rancher is a generated GoMock package.
package rancher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// clusterRegister mocks base method.
func (m *MockAPIClient) clusterRegister(arg0 string) (*ClusterRegistrationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "clusterRegister", arg0)
	ret0, _ := ret[0].(*ClusterRegistrationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// clusterRegister indicates an expected call of clusterRegister.
func (mr *MockAPIClientMockRecorder) clusterRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "clusterRegister", reflect.TypeOf((*MockAPIClient)(nil).clusterRegister), arg0)
}

// createCluster mocks base method.
func (m *MockAPIClient) createCluster(arg0 string) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createCluster", arg0)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createCluster indicates an expected call of createCluster.
func (mr *MockAPIClientMockRecorder) createCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createCluster", reflect.TypeOf((*MockAPIClient)(nil).createCluster), arg0)
}

// deleteClusterByID mocks base method.
func (m *MockAPIClient) deleteClusterByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteClusterByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteClusterByID indicates an expected call of deleteClusterByID.
func (mr *MockAPIClientMockRecorder) deleteClusterByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteClusterByID", reflect.TypeOf((*MockAPIClient)(nil).deleteClusterByID), arg0)
}

// fireRancherAPI mocks base method.
func (m *MockAPIClient) fireRancherAPI(arg0, arg1 string, arg2, arg3 interface{}, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fireRancherAPI", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// fireRancherAPI indicates an expected call of fireRancherAPI.
func (mr *MockAPIClientMockRecorder) fireRancherAPI(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fireRancherAPI", reflect.TypeOf((*MockAPIClient)(nil).fireRancherAPI), arg0, arg1, arg2, arg3, arg4)
}

// getAPIToken mocks base method.
func (m *MockAPIClient) getAPIToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAPIToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// getAPIToken indicates an expected call of getAPIToken.
func (mr *MockAPIClientMockRecorder) getAPIToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAPIToken", reflect.TypeOf((*MockAPIClient)(nil).getAPIToken))
}

// getClusterByID mocks base method.
func (m *MockAPIClient) getClusterByID(arg0 string) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getClusterByID", arg0)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getClusterByID indicates an expected call of getClusterByID.
func (mr *MockAPIClientMockRecorder) getClusterByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getClusterByID", reflect.TypeOf((*MockAPIClient)(nil).getClusterByID), arg0)
}

// getClusterList mocks base method.
func (m *MockAPIClient) getClusterList() (*ClusterCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getClusterList")
	ret0, _ := ret[0].(*ClusterCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getClusterList indicates an expected call of getClusterList.
func (mr *MockAPIClientMockRecorder) getClusterList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getClusterList", reflect.TypeOf((*MockAPIClient)(nil).getClusterList))
}

// getClusterNodesByID mocks base method.
func (m *MockAPIClient) getClusterNodesByID(arg0 string) (*NodeCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getClusterNodesByID", arg0)
	ret0, _ := ret[0].(*NodeCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getClusterNodesByID indicates an expected call of getClusterNodesByID.
func (mr *MockAPIClientMockRecorder) getClusterNodesByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getClusterNodesByID", reflect.TypeOf((*MockAPIClient)(nil).getClusterNodesByID), arg0)
}

// getNodesList mocks base method.
func (m *MockAPIClient) getNodesList() (*NodeCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNodesList")
	ret0, _ := ret[0].(*NodeCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNodesList indicates an expected call of getNodesList.
func (mr *MockAPIClientMockRecorder) getNodesList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNodesList", reflect.TypeOf((*MockAPIClient)(nil).getNodesList))
}

// loginWithCredentials mocks base method.
func (m *MockAPIClient) loginWithCredentials() (*Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loginWithCredentials")
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// loginWithCredentials indicates an expected call of loginWithCredentials.
func (mr *MockAPIClientMockRecorder) loginWithCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loginWithCredentials", reflect.TypeOf((*MockAPIClient)(nil).loginWithCredentials))
}

// verifyToken mocks base method.
func (m *MockAPIClient) verifyToken() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "verifyToken")
	ret0, _ := ret[0].(error)
	return ret0
}

// verifyToken indicates an expected call of verifyToken.
func (mr *MockAPIClientMockRecorder) verifyToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "verifyToken", reflect.TypeOf((*MockAPIClient)(nil).verifyToken))
}
